import pandas as pd
import numpy as np
import decoupler as dc
import os
from scipy import stats
import anndata as ad

def correlation_drugs_TF(df_prims, df_stimate_TF):        
    '''
    Devuelve la matriz de correlaciones con los TF en las filas y los broad_id en las columnas 
    df_prims:  debe ser el dataset con los cell_lines en las filas y los broad_id en las columnas, usualmente tomo la media cuando hay varios valores
    df_stimate_TF: matriz con los cell_lines en las filas y los broad_id en las columnas. 
    '''
    df_prims = df_prims.fillna(0)
    df_factors = df_stimate_TF.fillna(0)

    # Iterar sobre las columnas de df_prims
    correlation_matrix = pd.DataFrame(index=df_prims.columns, columns=df_factors.columns)

    for prim_col in df_prims.columns:
        auc_v = df_prims[prim_col].values
        
        # Iterar sobre las columnas de df_factors
        for factor_col in df_factors.columns:
            tf_v = df_factors[factor_col].values
            
            # Calcular la correlación de Pearson
            correlation, pvalue = stats.pearsonr(auc_v, tf_v)
            
            # Guardar la correlación en la matriz
            correlation_matrix.at[prim_col, factor_col] = correlation
    return correlation_matrix

def gsa_drug_enrichment(matrix, net, shared_net_id='broad_id', net_pathway='moa', n_min='5'):
    '''
    Funcion para hacer el gsea, devuelve una matriz con los resultados y los resultados filtrados por p-valor
    matrix: la matriz de correlación de la que sale la función anterior 
    net: la red que enlaza broad_id-moa
    shared_net: columna de la red que permite enlazar con la matriz de correlaciones 
    n_min: numero de elementos mínimos para ejecturar el gsea
    '''
    
    matrix = matrix.fillna(0)
    shared_elements = set(matrix.index).intersection(set(net[shared_net_id]))
    filtered_correlation_matrix = matrix.loc[shared_elements, :]
    filtered_df_net = net[net[shared_net_id].isin(shared_elements)]
    
    adata = ad.AnnData(filtered_correlation_matrix.T)
    
    results = dc.run_gsea(mat=adata,net=filtered_df_net,source=net_pathway,target=shared_net_id,min_n=n_min,use_raw=False)
    result_df_gsea = adata.obsm['gsea_estimate'] 
    p_value_gsea = adata.obsm['gsea_pvals']
    mask = p_value_gsea <= 0.05

    filtered_result_df_gsea = result_df_gsea[mask]
    filtered_result_df_gsea = filtered_result_df_gsea.dropna(how='all').dropna(axis=1, how='all')
    
    return result_df_gsea, filtered_result_df_gsea

#Normalmente lo implemento en un codigo con esta forma
#La idea es tener los datos agrupados en directorios e ir procesando los archivos por directorio. 
#df_pivot = df_outputs.groupby(['depmap_id', 'broad_id'])['auc'].mean().unstack()

base_path = ''
outputs_path = ''
net_path = ''

df_outputs = pd.read_csv(outputs_path, index_col=0)    
net = pd.read_csv(net_path, index_col=0)   

#Como tengo df_outputs de manera lineal uso este código para generar la matriz. 


for dir_path, dir_names, file_names in os.walk(base_path):
        
    dir_name = os.path.basename(os.path.normpath(dir_path))
    print("Procesando directorio:", dir_name)

    for nombre in file_names:
        final_path = os.path.join(dir_path, nombre)
        df_tf = None
        
        if os.path.isfile(final_path):
            if nombre.startswith('tf_'):
                df_tf = pd.read_csv(final_path, index_col=0)
                df_tf = df_tf.drop(columns='OncotreePrimaryDisease')
                print(f"Archivo tf_ procesado: {final_path}")
                

                try:        
                    if len(df_tf) > 1: 
                        
                        try:        
                            df_subouputs = df_pivot[df_pivot.index.isin(df_tf.index)]
                            cor_matrix = correlation_drugs_TF(df_prims=df_subouputs,df_stimate_TF=df_tf)
                            print('Correlaciones hechas')
                            
                            shared_net = 'broad_id'
                            pathway = 'moa'
                            elements = 5
                            
                            result_df_gsea_coll,filtered_result_df_gsea_coll = gsa_drug_enrichment(matrix=cor_matrix, net=net, shared_net_id=shared_net,n_min=elements,net_pathway=pathway)
                            print('GSEA hecho')
                            
                            cor_matrix.to_csv(f'{dir_path}/correlated_drugs_{dir_name}.csv')
                            filtered_result_df_gsea_coll.to_csv(f'{dir_path}/gsea_drugs_{dir_name}.csv')

                        except AttributeError:
                            continue
                    else:
                        continue
                except TypeError: 
                    continue
